//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputAction/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""player"",
            ""id"": ""72d8882f-b594-4502-8b6f-559ff7ac10b2"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""105b1285-30f3-45e4-83eb-213d7ff5eb5f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""left click"",
                    ""type"": ""Button"",
                    ""id"": ""c09e5efc-f6b6-4767-bf13-c7958e302bfd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""right click"",
                    ""type"": ""Button"",
                    ""id"": ""43affaa1-8407-4b42-8c38-8f44abdef6a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""r click"",
                    ""type"": ""Button"",
                    ""id"": ""fbe3b0ed-196c-4008-ab6d-04623b55aaf2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""4d47b331-05c8-48ec-a0a8-cd7e29ffbe5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rebinding"",
                    ""type"": ""Button"",
                    ""id"": ""bc01de10-aeb2-452e-851a-18812592015c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d4967d07-c2f5-4d3e-a524-380968bedb0b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d588cdb7-fc46-48ee-90be-e48430ad4afc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e52be9be-ddbe-421e-aa0e-67df6e2cfa22"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0efd6070-816d-4567-a509-b5ac774cfa6f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""58da3b37-c8b6-4823-a50d-d27dd1572e0f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""698efa09-77df-4196-993e-9058d708b16e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""left click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e76325a-5505-4c44-8d81-54d6add9543b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""right click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""357561ab-a3f9-433d-9139-6a3dcafc3676"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""r click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""881c52c8-543c-49c0-9090-fa72cc29d591"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""164c50ec-d2ca-4096-bb98-e6f920fe10a5"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rebinding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""rebinding"",
            ""id"": ""11671d05-c673-4b7b-9289-7819433c41ae"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""bb8729ed-7000-49f6-89d2-6828a29e646c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d1bcca4c-e53b-4eb5-8bb8-96a7b71fcfbd"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_move = m_player.FindAction("move", throwIfNotFound: true);
        m_player_leftclick = m_player.FindAction("left click", throwIfNotFound: true);
        m_player_rightclick = m_player.FindAction("right click", throwIfNotFound: true);
        m_player_rclick = m_player.FindAction("r click", throwIfNotFound: true);
        m_player_jump = m_player.FindAction("jump", throwIfNotFound: true);
        m_player_rebinding = m_player.FindAction("rebinding", throwIfNotFound: true);
        // rebinding
        m_rebinding = asset.FindActionMap("rebinding", throwIfNotFound: true);
        m_rebinding_Newaction = m_rebinding.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player
    private readonly InputActionMap m_player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_player_move;
    private readonly InputAction m_player_leftclick;
    private readonly InputAction m_player_rightclick;
    private readonly InputAction m_player_rclick;
    private readonly InputAction m_player_jump;
    private readonly InputAction m_player_rebinding;
    public struct PlayerActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_player_move;
        public InputAction @leftclick => m_Wrapper.m_player_leftclick;
        public InputAction @rightclick => m_Wrapper.m_player_rightclick;
        public InputAction @rclick => m_Wrapper.m_player_rclick;
        public InputAction @jump => m_Wrapper.m_player_jump;
        public InputAction @rebinding => m_Wrapper.m_player_rebinding;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @leftclick.started += instance.OnLeftclick;
            @leftclick.performed += instance.OnLeftclick;
            @leftclick.canceled += instance.OnLeftclick;
            @rightclick.started += instance.OnRightclick;
            @rightclick.performed += instance.OnRightclick;
            @rightclick.canceled += instance.OnRightclick;
            @rclick.started += instance.OnRclick;
            @rclick.performed += instance.OnRclick;
            @rclick.canceled += instance.OnRclick;
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
            @rebinding.started += instance.OnRebinding;
            @rebinding.performed += instance.OnRebinding;
            @rebinding.canceled += instance.OnRebinding;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @leftclick.started -= instance.OnLeftclick;
            @leftclick.performed -= instance.OnLeftclick;
            @leftclick.canceled -= instance.OnLeftclick;
            @rightclick.started -= instance.OnRightclick;
            @rightclick.performed -= instance.OnRightclick;
            @rightclick.canceled -= instance.OnRightclick;
            @rclick.started -= instance.OnRclick;
            @rclick.performed -= instance.OnRclick;
            @rclick.canceled -= instance.OnRclick;
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
            @rebinding.started -= instance.OnRebinding;
            @rebinding.performed -= instance.OnRebinding;
            @rebinding.canceled -= instance.OnRebinding;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @player => new PlayerActions(this);

    // rebinding
    private readonly InputActionMap m_rebinding;
    private List<IRebindingActions> m_RebindingActionsCallbackInterfaces = new List<IRebindingActions>();
    private readonly InputAction m_rebinding_Newaction;
    public struct RebindingActions
    {
        private @PlayerControl m_Wrapper;
        public RebindingActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_rebinding_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_rebinding; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RebindingActions set) { return set.Get(); }
        public void AddCallbacks(IRebindingActions instance)
        {
            if (instance == null || m_Wrapper.m_RebindingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RebindingActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IRebindingActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IRebindingActions instance)
        {
            if (m_Wrapper.m_RebindingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRebindingActions instance)
        {
            foreach (var item in m_Wrapper.m_RebindingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RebindingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RebindingActions @rebinding => new RebindingActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLeftclick(InputAction.CallbackContext context);
        void OnRightclick(InputAction.CallbackContext context);
        void OnRclick(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRebinding(InputAction.CallbackContext context);
    }
    public interface IRebindingActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
